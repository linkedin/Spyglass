plugins {
    id 'com.android.library'
    id 'idea'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName VERSION_NAME
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize '2048m'
    }

    testOptions.unitTests {
        all {
            // configure the set of classes for JUnit tests
            include '**/*Test.class'
            exclude '**/espresso/**/*.class'

            // configure max heap size of the test JVM
            maxHeapSize = '2048m'

            // Specify max number of processes (default is 1)
            maxParallelForks = 4

            // Specify max number of test classes to execute in a test process
            // before restarting the process (default is unlimited)
            forkEvery = 150

            // configure whether failing tests should fail the build
            ignoreFailures false

            // use afterTest to listen to the test execution results
            afterTest { descriptor, result ->
                println "Executing test for ${descriptor.name} with result: ${result.resultType}"
            }
        }
        includeAndroidResources = true
    }
}

dependencies {
    implementation "androidx.fragment:fragment:${rootProject.ext.supportLibrariesVersion}"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

group = GROUP_ID
version = VERSION_NAME

publishing {
    publications {
        aar(MavenPublication) {

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar") {
                builtBy assemble
            }
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name 'Spyglass'
                    description LIBRARY_DESCRIPTION
                    url LIBRARY_GIT_URL

                    scm {
                        url LIBRARY_GIT_URL
                        connection LIBRARY_GIT_CONNECTION
                        developerConnection LIBRARY_GIT_CONNECTION
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'com.linkedin'
                            name 'LinkedIn Corp'
                            email ''
                        }
                    }

                    dependencies {
                        configurations.implementation.allDependencies.each { ModuleDependency dp ->
                            dependency {
                                resolveStrategy = Closure.DELEGATE_ONLY
                                groupId dp.group
                                artifactId dp.name
                                version dp.version
                            }
                        }
                    }
                }
            }
        }
    }
}

bintray {

    user = System.getenv('BINTRAY_USER') ?: ""
    key = System.getenv('BINTRAY_KEY') ?: ""

    pkg {
        userOrg = 'linkedin-spyglass'
        repo = 'maven'
        name = 'spyglass'
        desc = LIBRARY_DESCRIPTION
        labels = ['android', 'mentions', 'suggestions']
        licenses = ['Apache-2.0']

        websiteUrl = LIBRARY_GIT_URL
        vcsUrl = LIBRARY_GIT_URL
        issueTrackerUrl = 'https://github.com/linkedin/Spyglass/issues'
        githubRepo = 'linkedin/spyglass'

        version {
            name = VERSION_NAME
            released = new Date()
        }

        publish = true
    }

    publications = ['aar']
}
